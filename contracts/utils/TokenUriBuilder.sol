// SPDX-License-Identifier: MIT
pragma solidity 0.8.28;

import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/Base64.sol";

contract TokenUriBuilder {

    using Strings for uint256;

    int constant internal OFFSET19700101 = 2440588;
    string constant public _imageUrl = "https://pumpbtc-img.s3.ap-east-1.amazonaws.com/pizza/vePump.png";
    string constant public _description = "PumpBTC is a next-generation BTC synthetic token that combines the yield and 1:1 peg of BTC in ERC20 form, designed to serve as the interest bearing BTC for all Defi Apps. $vePUMP NFTs vote on token emissions and receive bribes and fee generated by the protocol.";

    /**
     * @dev Fliegel-Van Flandern algorithm. See https://aa.usno.navy.mil/faq/JD_formula
     *   for more details.
     */
    function _daysToDate(
        uint256 _days
    ) internal pure returns (uint256 year, uint256 month, uint256 day) {
        int L = int(_days) + 68569 + OFFSET19700101;
        int N = 4 * L / 146097;
        L = L - (146097 * N + 3) / 4;
        int _year = 4000 * (L + 1) / 1461001;
        L = L - 1461 * _year / 4 + 31;
        int _month = 80 * L / 2447;
        int _day = L - 2447 * _month / 80;
        L = _month / 11;
        _month = _month + 2 - 12 * L;
        _year = 100 * (N - 49) + _year + L;
        year = uint256(_year);
        month = uint256(_month);
        day = uint256(_day);
    }

    function timestampToDate(
        uint256 timestamp
    ) public pure returns (uint256 year, uint256 month, uint256 day) {
        (year, month, day) = _daysToDate(timestamp / 86400);
    }

    function _buildTokenUri(
        uint256 tokenId,
        uint208 amount,
        uint48 unlockTime,
        uint48 lockPeriod,
        uint208 votingPower
    ) internal pure returns (string memory) {

        (uint256 year, uint256 month, uint256 day) = timestampToDate(uint256(unlockTime));
        string memory date = string(abi.encodePacked(
            '"', year.toString(), '-', month.toString(), '-', day.toString(), '"'
        ));

        string memory attributes = string(
            abi.encodePacked(
	            '{',
                    '"trait_type": "Locked $PUMP", '
                    '"value": ', uint256(amount).toString(),
                '}, ',
                '{',
                    '"trait_type": "Unlock Date", ',
                    '"value": ', date,
                '}, ',
                '{',
                    '"trait_type": "Lock Period", ',
                    '"value": ', uint256(lockPeriod).toString(),
                '}, ',
                '{',
                    '"trait_type": "Voting Power", ',
                    '"value": ', uint256(votingPower).toString(),
	            '}'
            )
        );

        string memory json = string(
            abi.encodePacked(
                '{',
                    '"name": "lock #', tokenId.toString(), '", ',  // "%23" is "#"
                    '"description": "',  _description, '", ',
                    '"image_data": "',  _imageUrl, '", ',
                    '"attributes": [', attributes, ']',
                '}'
            )
        );

        return string(abi.encodePacked("data:application/json;base64,", Base64.encode(bytes(json))));
    }

}